<?xml version="1.0" encoding="utf-8"?>
<CoverageReport scope="Test.Program">
  <Summary>
    <Class>Test.Program</Class>
    <Assembly>Sample</Assembly>
    <Files>
      <File>C:\temp\Program.cs</File>
    </Files>
    <Coveredlines>15</Coveredlines>
    <Uncoveredlines>0</Uncoveredlines>
    <Coverablelines>15</Coverablelines>
    <Totallines>84</Totallines>
    <Linecoverage>100</Linecoverage>
    <Coveredbranches>0</Coveredbranches>
    <Totalbranches>0</Totalbranches>
    <Coveredmethods>3</Coveredmethods>
    <Fullcoveredmethods>3</Fullcoveredmethods>
    <Totalmethods>3</Totalmethods>
    <Methodcoverage>100</Methodcoverage>
    <Fullmethodcoverage>100</Fullmethodcoverage>
  </Summary>
  <Metrics>
    <Element name="CallAsyncMethod">
      <Cyclomaticcomplexity>3</Cyclomaticcomplexity>
      <NPathcomplexity>0</NPathcomplexity>
      <Sequencecoverage>100</Sequencecoverage>
      <Branchcoverage>100</Branchcoverage>
      <CrapScore>3</CrapScore>
    </Element>
    <Element name="ctor">
      <Cyclomaticcomplexity>1</Cyclomaticcomplexity>
      <NPathcomplexity>0</NPathcomplexity>
      <Sequencecoverage>100</Sequencecoverage>
      <Branchcoverage>100</Branchcoverage>
      <CrapScore>1</CrapScore>
    </Element>
    <Element name="SendAsync">
      <Cyclomaticcomplexity>1</Cyclomaticcomplexity>
      <NPathcomplexity>0</NPathcomplexity>
      <Sequencecoverage>100</Sequencecoverage>
      <Branchcoverage>100</Branchcoverage>
      <CrapScore>1</CrapScore>
    </Element>
  </Metrics>
  <Files>
    <File name="C:\temp\Program.cs">
      <LineAnalysis line="1" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="using System.Net.Http;" />
      <LineAnalysis line="2" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="using System.Threading;" />
      <LineAnalysis line="3" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="using System.Threading.Tasks;" />
      <LineAnalysis line="4" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="using Microsoft.VisualStudio.TestTools.UnitTesting;" />
      <LineAnalysis line="5" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="6" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="namespace Test" />
      <LineAnalysis line="7" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="{" />
      <LineAnalysis line="8" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    [TestClass]" />
      <LineAnalysis line="9" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    public class Program" />
      <LineAnalysis line="10" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    {" />
      <LineAnalysis line="11" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        static void Main(string[] args)" />
      <LineAnalysis line="12" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        {" />
      <LineAnalysis line="13" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            new TestClass().SampleFunction();" />
      <LineAnalysis line="14" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="15" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            new TestClass2(&quot;Test&quot;).ExecutedMethod();" />
      <LineAnalysis line="16" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            new TestClass2(&quot;Test&quot;).SampleFunction(&quot;Munich&quot;);" />
      <LineAnalysis line="17" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="18" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            new PartialClass().ExecutedMethod_1();" />
      <LineAnalysis line="19" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            new PartialClass().ExecutedMethod_2();" />
      <LineAnalysis line="20" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            new PartialClass().SomeProperty = -10;" />
      <LineAnalysis line="21" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="22" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="            new PartialClassWithAutoProperties().Property1 = &quot;Test&quot;;" />
      <LineAnalysis line="23" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            new PartialClassWithAutoProperties().Property2 = &quot;Test&quot;;" />
      <LineAnalysis line="24" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="25" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            new SomeClass().Property1 = &quot;Test&quot;;" />
      <LineAnalysis line="26" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="27" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            new ClassWithExcludes().IncludedMethod();" />
      <LineAnalysis line="28" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            new ClassWithExcludes().ExcludedMethod();" />
      <LineAnalysis line="29" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="30" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            new GenericClass&lt;SomeModel, IState&gt;().Process(null);" />
      <LineAnalysis line="31" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            new GenericClass&lt;SomeModel, IState&gt;().PostProcess(null);" />
      <LineAnalysis line="32" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="33" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            new CodeContract_Target().Calculate(-1);" />
      <LineAnalysis line="34" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="35" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            new AbstractClass_SampleImpl1();" />
      <LineAnalysis line="36" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            new AbstractClass_SampleImpl2();" />
      <LineAnalysis line="37" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="38" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            CallAsyncMethod();" />
      <LineAnalysis line="39" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="40" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            try" />
      <LineAnalysis line="41" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            {" />
      <LineAnalysis line="42" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                new CodeContract_Target().Calculate(0);" />
      <LineAnalysis line="43" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            }" />
      <LineAnalysis line="44" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            catch (System.ArgumentException)" />
      <LineAnalysis line="45" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            {" />
      <LineAnalysis line="46" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            }" />
      <LineAnalysis line="47" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        }" />
      <LineAnalysis line="48" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="49" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        [TestMethod]" />
      <LineAnalysis line="50" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="        public void CSharp_ExecuteTest1()" />
      <LineAnalysis line="51" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        {" />
      <LineAnalysis line="52" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            Main(null);" />
      <LineAnalysis line="53" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        }" />
      <LineAnalysis line="54" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="55" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        [TestMethod]" />
      <LineAnalysis line="56" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        public void CSharp_ExecuteTest2()" />
      <LineAnalysis line="57" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        {" />
      <LineAnalysis line="58" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            Main(null);" />
      <LineAnalysis line="59" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        }" />
      <LineAnalysis line="60" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="61" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        private static async void CallAsyncMethod()" />
      <LineAnalysis line="62" visits="1" coverage="Covered" coveredbranches="" totalbranches="" content="        {" />
      <LineAnalysis line="63" visits="1" coverage="Covered" coveredbranches="" totalbranches="" content="            var expected = new HttpResponseMessage();" />
      <LineAnalysis line="64" visits="1" coverage="Covered" coveredbranches="" totalbranches="" content="            var handler = new AsyncClass() { InnerHandler = new EchoHandler(expected) };" />
      <LineAnalysis line="65" visits="1" coverage="Covered" coveredbranches="" totalbranches="" content="            var invoker = new HttpMessageInvoker(handler, false);" />
      <LineAnalysis line="66" visits="1" coverage="Covered" coveredbranches="" totalbranches="" content="            var actual = await invoker.SendAsync(new HttpRequestMessage(), new CancellationToken());" />
      <LineAnalysis line="67" visits="1" coverage="Covered" coveredbranches="" totalbranches="" content="        }" />
      <LineAnalysis line="68" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="69" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        private class EchoHandler : DelegatingHandler" />
      <LineAnalysis line="70" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        {" />
      <LineAnalysis line="71" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            private HttpResponseMessage _response;" />
      <LineAnalysis line="72" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="73" visits="1" coverage="Covered" coveredbranches="" totalbranches="" content="            public EchoHandler(HttpResponseMessage response)" />
      <LineAnalysis line="74" visits="1" coverage="Covered" coveredbranches="" totalbranches="" content="            {" />
      <LineAnalysis line="75" visits="1" coverage="Covered" coveredbranches="" totalbranches="" content="                this._response = response;" />
      <LineAnalysis line="76" visits="1" coverage="Covered" coveredbranches="" totalbranches="" content="            }" />
      <LineAnalysis line="77" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="78" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            protected override Task&lt;HttpResponseMessage&gt; SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)" />
      <LineAnalysis line="79" visits="1" coverage="Covered" coveredbranches="" totalbranches="" content="            {" />
      <LineAnalysis line="80" visits="1" coverage="Covered" coveredbranches="" totalbranches="" content="                return Task.FromResult(this._response);" />
      <LineAnalysis line="81" visits="1" coverage="Covered" coveredbranches="" totalbranches="" content="            }" />
      <LineAnalysis line="82" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        }" />
      <LineAnalysis line="83" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    }" />
      <LineAnalysis line="84" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="}" />
    </File>
  </Files>
</CoverageReport>